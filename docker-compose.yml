version: "3.3"

networks:
  traefik_traefik:
    external:
      name: traefik_traefik

volumes:
    prometheus: {}
    grafana: {}
    alertmanager: {}

services:
  cadvisor:
    image: google/cadvisor
    networks:
      - traefik_traefik
    command: -logtostderr -docker_only
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    deploy:
      mode: global

  grafana:
    image: grafana/grafana:5.1.3
    networks:
      - traefik_traefik
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=P@ssword
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana:/var/lib/grafana
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.backend=grafana"
        - "traefik.frontend.rule=Host:grafana.vsphere.local"
        - "traefik.docker.network=traefik_traefik"
        - "traefik.port=3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 5s
      timeout: 1s
      retries: 5

  alertmanager:
    image: prom/alertmanager:v0.14.0
    networks:
      - traefik_traefik
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes: 
      - ./alertmanager/:/etc/alertmanager/
      - alertmanager:/alertmanager
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  node-exporter:
    image: prom/node-exporter:latest
    networks:
      - traefik_traefik
    environment:
      - NODE_ID={{.Node.ID}}
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/hostname:/etc/nodename
    command:
      - '--path.sysfs=/host/sys'
      - '--path.procfs=/host/proc'
      - '--collector.textfile.directory=/etc/node-exporter/'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.ipvs'
    deploy:
      mode: global

  haproxy-exporter:
    image: quay.io/prometheus/haproxy-exporter:v0.9.0
    networks:
      - traefik_traefik
    command:
      - '--haproxy.scrape-uri=http://10.0.1.146/haproxy?stats;csv'
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  postgres-exporter:
    image: wrouesnel/postgres_exporter
    networks:
      - traefik_traefik
    environment:
      - DATA_SOURCE_NAME="postgresql://postgres:secretpassword@10.0.1.141:5432/?sslmode=disable"
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  prometheus:
    image: prom/prometheus:v2.2.1
    networks:
      - traefik_traefik
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention=12600h'
      - '--web.enable-lifecycle'
    volumes:
      - prometheus:/prometheus
      - ./prometheus:/etc/prometheus/
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.backend=prometheus"
        - "traefik.frontend.rule=Host:prom.vsphere.local"
        - "traefik.docker.network=traefik_traefik"
        - "traefik.port=9090"